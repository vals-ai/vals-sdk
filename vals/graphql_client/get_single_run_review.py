# Generated by ariadne-codegen
# Source: vals/graphql/

from datetime import datetime
from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import RunReviewStatusEnum, TemplateType


class GetSingleRunReview(BaseModel):
    single_run_reviews_with_count: "GetSingleRunReviewSingleRunReviewsWithCount" = (
        Field(alias="singleRunReviewsWithCount")
    )


class GetSingleRunReviewSingleRunReviewsWithCount(BaseModel):
    single_run_reviews: List[
        "GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviews"
    ] = Field(alias="singleRunReviews")


class GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviews(BaseModel):
    id: Any
    created_by: str = Field(alias="createdBy")
    created_at: datetime = Field(alias="createdAt")
    status: Optional[RunReviewStatusEnum]
    completed_time: Optional[datetime] = Field(alias="completedTime")
    number_of_reviews: Optional[int] = Field(alias="numberOfReviews")
    assigned_reviewers: Any = Field(alias="assignedReviewers")
    rereview_auto_eval: bool = Field(alias="rereviewAutoEval")
    custom_review_templates: List[
        "GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsCustomReviewTemplates"
    ] = Field(alias="customReviewTemplates")
    singletestresultreview_set: List[
        "GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSet"
    ] = Field(alias="singletestresultreviewSet")


class GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsCustomReviewTemplates(
    BaseModel
):
    id: Any
    name: str
    instructions: str
    categories: Optional[List[str]]
    type: TemplateType
    min_value: Optional[int] = Field(alias="minValue")
    max_value: Optional[int] = Field(alias="maxValue")


class GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSet(
    BaseModel
):
    id: Any
    agreement_rate: float = Field(alias="agreementRate")
    pass_percentage: float = Field(alias="passPercentage")
    test_result: (
        "GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSetTestResult"
    ) = Field(alias="testResult")
    custom_review_values: List[
        "GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSetCustomReviewValues"
    ] = Field(alias="customReviewValues")


class GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSetTestResult(
    BaseModel
):
    id: str
    llm_output: str = Field(alias="llmOutput")
    qa_pair: Optional[
        "GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSetTestResultQaPair"
    ] = Field(alias="qaPair")
    typed_result_json: List[
        "GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSetTestResultTypedResultJson"
    ] = Field(alias="typedResultJson")
    test: "GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSetTestResultTest"


class GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSetTestResultQaPair(
    BaseModel
):
    id: Any
    output_context: Any = Field(alias="outputContext")


class GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSetTestResultTypedResultJson(
    BaseModel
):
    criteria: str
    operator: str


class GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSetTestResultTest(
    BaseModel
):
    test_id: str = Field(alias="testId")
    input_under_test: str = Field(alias="inputUnderTest")
    typed_context: Any = Field(alias="typedContext")
    typed_file_ids: List[str] = Field(alias="typedFileIds")


class GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSetCustomReviewValues(
    BaseModel
):
    template: "GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSetCustomReviewValuesTemplate"
    value: str


class GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSetCustomReviewValuesTemplate(
    BaseModel
):
    id: Any
    name: str
    instructions: str
    categories: Optional[List[str]]
    type: TemplateType
    min_value: Optional[int] = Field(alias="minValue")
    max_value: Optional[int] = Field(alias="maxValue")


GetSingleRunReview.model_rebuild()
GetSingleRunReviewSingleRunReviewsWithCount.model_rebuild()
GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviews.model_rebuild()
GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSet.model_rebuild()
GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSetTestResult.model_rebuild()
GetSingleRunReviewSingleRunReviewsWithCountSingleRunReviewsSingletestresultreviewSetCustomReviewValues.model_rebuild()
