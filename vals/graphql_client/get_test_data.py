# Generated by ariadne-codegen
# Source: vals/graphql/

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import ExampleType


class GetTestData(BaseModel):
    tests: List[Optional["GetTestDataTests"]]


class GetTestDataTests(BaseModel):
    checks: Any
    typed_checks: List["GetTestDataTestsTypedChecks"] = Field(alias="typedChecks")
    test_id: str = Field(alias="testId")
    cross_version_id: str = Field(alias="crossVersionId")
    file_ids: Any = Field(alias="fileIds")
    input_under_test: str = Field(alias="inputUnderTest")
    tags: Any
    context: Any
    golden_output: str = Field(alias="goldenOutput")


class GetTestDataTestsTypedChecks(BaseModel):
    operator: str
    criteria: str
    modifiers: "GetTestDataTestsTypedChecksModifiers"


class GetTestDataTestsTypedChecksModifiers(BaseModel):
    optional: bool
    severity: float
    extractor: str
    examples: List["GetTestDataTestsTypedChecksModifiersExamples"]
    conditional: "GetTestDataTestsTypedChecksModifiersConditional"


class GetTestDataTestsTypedChecksModifiersExamples(BaseModel):
    type: ExampleType
    text: str


class GetTestDataTestsTypedChecksModifiersConditional(BaseModel):
    operator: str
    criteria: str


GetTestData.model_rebuild()
GetTestDataTests.model_rebuild()
GetTestDataTestsTypedChecks.model_rebuild()
GetTestDataTestsTypedChecksModifiers.model_rebuild()
